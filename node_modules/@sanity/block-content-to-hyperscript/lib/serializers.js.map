{"version":3,"sources":["../src/serializers.js"],"names":["objectAssign","require","getImageUrl","module","exports","h","serializerOpts","serializeOptions","useDashedStyles","BlockSerializer","props","node","serializers","options","isInline","children","blockType","_type","serializer","types","Error","SpanSerializer","mark","isPlain","markType","marks","console","warn","markFallback","ListSerializer","tag","type","ListItemSerializer","style","block","BlockTypeSerializer","test","RawMarkSerializer","UnderlineSerializer","textDecoration","StrikeThroughSerializer","LinkSerializer","href","ImageSerializer","asset","img","src","serializeSpan","span","index","hardBreak","key","text","map","child","i","serializeNode","serializedNode","_key","HardBreakSerializer","defaultMarkSerializers","strong","bind","em","code","underline","link","defaultSerializers","image","list","listItem","container","undefined","empty"],"mappings":"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","sourcesContent":["const objectAssign = require('object-assign')\nconst getImageUrl = require('./getImageUrl')\n\nmodule.exports = (h, serializerOpts) => {\n  const serializeOptions = serializerOpts || {useDashedStyles: false}\n\n  // Low-level block serializer\n  function BlockSerializer(props) {\n    const {node, serializers, options, isInline, children} = props\n    const blockType = node._type\n    const serializer = serializers.types[blockType]\n    if (!serializer) {\n      throw new Error(\n        `Unknown block type \"${blockType}\", please specify a serializer for it in the \\`serializers.types\\` prop`\n      )\n    }\n\n    return h(serializer, {node, options, isInline}, children)\n  }\n\n  // Low-level span serializer\n  function SpanSerializer(props) {\n    const {mark, children} = props.node\n    const isPlain = typeof mark === 'string'\n    const markType = isPlain ? mark : mark._type\n    const serializer = props.serializers.marks[markType]\n    if (!serializer) {\n      // @todo Revert back to throwing errors?\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Unknown mark type \"${markType}\", please specify a serializer for it in the \\`serializers.marks\\` prop`\n      )\n      return h(props.serializers.markFallback, null, children)\n    }\n\n    return h(serializer, props.node, children)\n  }\n\n  // Low-level list serializer\n  function ListSerializer(props) {\n    const tag = props.type === 'bullet' ? 'ul' : 'ol'\n    return h(tag, null, props.children)\n  }\n\n  // Low-level list item serializer\n  function ListItemSerializer(props) {\n    const children =\n      !props.node.style || props.node.style === 'normal'\n        ? // Don't wrap plain text in paragraphs inside of a list item\n          props.children\n        : // But wrap any other style in whatever the block serializer says to use\n          h(props.serializers.types.block, props, props.children)\n\n    return h('li', null, children)\n  }\n\n  // Renderer of an actual block of type `block`. Confusing, we know.\n  function BlockTypeSerializer(props) {\n    const style = props.node.style || 'normal'\n\n    if (/^h\\d/.test(style)) {\n      return h(style, null, props.children)\n    }\n\n    return style === 'blockquote'\n      ? h('blockquote', null, props.children)\n      : h('p', null, props.children)\n  }\n\n  // Serializers for things that can be directly attributed to a tag without any props\n  // We use partial application to do this, passing the tag name as the first argument\n  function RawMarkSerializer(tag, props) {\n    return h(tag, null, props.children)\n  }\n\n  function UnderlineSerializer(props) {\n    const style = serializeOptions.useDashedStyles\n      ? {'text-decoration': 'underline'}\n      : {textDecoration: 'underline'}\n\n    return h('span', {style}, props.children)\n  }\n\n  function StrikeThroughSerializer(props) {\n    return h('del', null, props.children)\n  }\n\n  function LinkSerializer(props) {\n    return h('a', {href: props.mark.href}, props.children)\n  }\n\n  function ImageSerializer(props) {\n    if (!props.node.asset) {\n      return null\n    }\n\n    const img = h('img', {src: getImageUrl(props)})\n    return props.isInline ? img : h('figure', null, img)\n  }\n\n  // Serializer that recursively calls itself, producing a hyperscript tree of spans\n  function serializeSpan(span, serializers, index, options) {\n    if (span === '\\n' && serializers.hardBreak) {\n      return h(serializers.hardBreak, {key: `hb-${index}`})\n    }\n\n    if (typeof span === 'string') {\n      return serializers.text ? h(serializers.text, {key: `text-${index}`}, span) : span\n    }\n\n    let children\n    if (span.children) {\n      children = {\n        children: span.children.map((child, i) =>\n          options.serializeNode(child, i, span.children, true)\n        )\n      }\n    }\n\n    const serializedNode = objectAssign({}, span, children)\n\n    return h(serializers.span, {\n      key: span._key || `span-${index}`,\n      node: serializedNode,\n      serializers\n    })\n  }\n\n  const HardBreakSerializer = () => h('br')\n  const defaultMarkSerializers = {\n    strong: RawMarkSerializer.bind(null, 'strong'),\n    em: RawMarkSerializer.bind(null, 'em'),\n    code: RawMarkSerializer.bind(null, 'code'),\n    underline: UnderlineSerializer,\n    'strike-through': StrikeThroughSerializer,\n    link: LinkSerializer\n  }\n\n  const defaultSerializers = {\n    // Common overrides\n    types: {\n      block: BlockTypeSerializer,\n      image: ImageSerializer\n    },\n    marks: defaultMarkSerializers,\n\n    // Less common overrides\n    list: ListSerializer,\n    listItem: ListItemSerializer,\n\n    block: BlockSerializer,\n    span: SpanSerializer,\n    hardBreak: HardBreakSerializer,\n\n    // Container element\n    container: 'div',\n\n    // When we can't resolve the mark properly, use this renderer as the container\n    markFallback: 'span',\n\n    // Allow overriding text renderer, but leave undefined to just use plain strings by default\n    text: undefined,\n\n    // Empty nodes (React uses null, hyperscript with empty strings)\n    empty: ''\n  }\n\n  return {\n    defaultSerializers,\n    serializeSpan\n  }\n}\n"],"file":"serializers.js"}