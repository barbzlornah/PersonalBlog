"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConnectorsOverlay = void 0;

var _sortBy2 = _interopRequireDefault(require("lodash/sortBy"));

var _react = _interopRequireDefault(require("react"));

var _scroll = require("part:@sanity/components/scroll");

var _ = require("../");

var _findMostSpecificTarget = require("../helpers/findMostSpecificTarget");

var _getRelativeRect = _interopRequireDefault(require("../helpers/getRelativeRect"));

var _isChangeBar = _interopRequireDefault(require("../helpers/isChangeBar"));

var _scrollIntoView = _interopRequireDefault(require("../helpers/scrollIntoView"));

var _constants = require("../constants");

var _Connector = require("./Connector");

var _Arrow = require("./Arrow");

var _ConnectorsOverlay = _interopRequireDefault(require("./ConnectorsOverlay.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var DEBUG = false;

var ConnectorsOverlay = /*#__PURE__*/_react.default.memo(function ConnectorsOverlay(props) {
  var rootRef = props.rootRef,
      onSetFocus = props.onSetFocus;

  var _React$useState = _react.default.useState(null),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      hovered = _React$useState2[0],
      setHovered = _React$useState2[1];

  var allReportedValues = (0, _.useReportedValues)();

  var _React$useReducer = _react.default.useReducer(n => n + 1, 0),
      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),
      forceUpdate = _React$useReducer2[1];

  var byId = new Map(allReportedValues);
  var reportedChangesPanel = byId.get('changesPanel');

  if (!reportedChangesPanel) {
    return null;
  }

  var changesPanelRect = (0, _getRelativeRect.default)(reportedChangesPanel.element, rootRef);
  var changeBarsWithHover = [];
  var changeBarsWithFocus = [];

  var _iterator = _createForOfIteratorHelper(allReportedValues),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var value = _step.value;

      if (!(0, _isChangeBar.default)(value) || !value[1].isChanged) {
        continue;
      }

      var _value = _slicedToArray(value, 2),
          id = _value[0],
          reportedChangeBar = _value[1];

      if (id === hovered) {
        changeBarsWithHover.push(value);
        continue;
      }

      if (reportedChangeBar.hasHover) {
        changeBarsWithHover.push(value);
        continue;
      }

      if (reportedChangeBar.hasFocus) {
        changeBarsWithFocus.push(value);
        continue;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var isHoverConnector = changeBarsWithHover.length > 0;
  var changeBarsWithFocusOrHover = isHoverConnector ? changeBarsWithHover : changeBarsWithFocus;
  var enabledConnectors = changeBarsWithFocusOrHover.map((_ref) => {
    var _ref2 = _slicedToArray(_ref, 1),
        id = _ref2[0];

    return {
      field: _objectSpread({
        id
      }, (0, _findMostSpecificTarget.findMostSpecificTarget)('field', id, byId)),
      change: _objectSpread({
        id
      }, (0, _findMostSpecificTarget.findMostSpecificTarget)('change', id, byId))
    };
  }).filter((_ref3) => {
    var field = _ref3.field,
        change = _ref3.change;
    return field && change && field.element && change.element;
  }).map((_ref4) => {
    var field = _ref4.field,
        change = _ref4.change;
    return {
      hasHover: field.hasHover || change.hasHover,
      hasFocus: field.hasFocus,
      field: _objectSpread(_objectSpread({}, field), {}, {
        rect: (0, _getRelativeRect.default)(field.element, rootRef)
      }),
      change: _objectSpread(_objectSpread({}, change), {}, {
        rect: (0, _getRelativeRect.default)(change.element, rootRef)
      })
    };
  }); // note: this assumes the changes panel header and the document panel always have the same height

  var topEdge = changesPanelRect === null || changesPanelRect === void 0 ? void 0 : changesPanelRect.top;
  var verticalLineLeft = changesPanelRect === null || changesPanelRect === void 0 ? void 0 : changesPanelRect.left;
  var visibleConnectors = (0, _sortBy2.default)(enabledConnectors, c => -c.field.path.length).slice(0, 1);
  return /*#__PURE__*/_react.default.createElement(_scroll.ScrollMonitor, {
    onScroll: forceUpdate
  }, /*#__PURE__*/_react.default.createElement("svg", {
    className: _ConnectorsOverlay.default.svg,
    style: _objectSpread(_objectSpread({}, DEBUG ? {
      backgroundColor: 'rgba(0, 100, 100, 0.2)'
    } : {}), {}, {
      top: changesPanelRect.top,
      height: changesPanelRect.height
    })
  }, visibleConnectors.map((_ref5) => {
    var field = _ref5.field,
        change = _ref5.change,
        hasFocus = _ref5.hasFocus;
    var changeMarkerLeft = change.rect.left + _constants.CONNECTOR_STROKE_WIDTH / 2;
    var fieldTop = field.rect.top + _constants.VERTICAL_CONNECTOR_PADDING;
    var fieldBottom = field.rect.top + field.rect.height - _constants.VERTICAL_CONNECTOR_PADDING;
    var changeTop = change.rect.top + _constants.VERTICAL_CONNECTOR_PADDING;
    var changeBottom = change.rect.top + change.rect.height - _constants.VERTICAL_CONNECTOR_PADDING;
    var connectorFromTop;
    var connectorToTop;

    if (fieldBottom < changeTop) {
      connectorFromTop = fieldBottom;
      connectorToTop = changeTop;
    } else if (fieldTop > changeBottom) {
      connectorFromTop = fieldTop;
      connectorToTop = changeBottom;
    } else {
      connectorFromTop = Math.max(fieldTop, changeTop);
      connectorToTop = Math.max(fieldTop, changeTop);
    }

    var connectorFrom = {
      left: field.rect.left + field.rect.width + _constants.CONNECTOR_STROKE_WIDTH / 2,
      top: connectorFromTop
    };
    var connectorTo = {
      left: changeMarkerLeft,
      top: connectorToTop
    };
    var fieldClampConnector = {
      top: field.rect.bounds.top + _constants.CONNECTOR_BOUNDS_MARGIN,
      bottom: field.rect.bounds.bottom - _constants.CONNECTOR_BOUNDS_MARGIN
    };
    var changeClampConnector = {
      top: change.rect.bounds.top + _constants.CONNECTOR_BOUNDS_MARGIN,
      bottom: change.rect.bounds.bottom - _constants.CONNECTOR_BOUNDS_MARGIN
    };
    var drawArrowRightTop = changeBottom <= changeClampConnector.top;
    var drawArrowLeftTop = fieldBottom <= fieldClampConnector.top;
    var drawArrowLeftBottom = fieldTop >= fieldClampConnector.bottom;
    var drawArrowRightBottom = changeTop > changeClampConnector.bottom;

    if (drawArrowLeftTop && drawArrowRightTop) {
      // Prevent drawing ^----^ arrow
      return null;
    } else if (drawArrowLeftBottom && drawArrowRightBottom) {
      // Prevent drawing v----v arrow
      return null;
    }

    var connectorClassName = _ConnectorsOverlay.default.connector;

    if (change.hasRevertHover) {
      connectorClassName = _ConnectorsOverlay.default.dangerConnector;
    } else if (!hasFocus && isHoverConnector) {
      connectorClassName = _ConnectorsOverlay.default.hoverConnector;
    }

    var onConnectorClick = () => {
      (0, _scrollIntoView.default)(field);
      (0, _scrollIntoView.default)(change);
      onSetFocus(field.path);
    };

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
      key: "field-".concat(field.id)
    }, change && /*#__PURE__*/_react.default.createElement("g", {
      onClick: onConnectorClick,
      className: connectorClassName
    }, /*#__PURE__*/_react.default.createElement(_Connector.Connector, {
      from: connectorFrom,
      to: connectorTo,
      onMouseEnter: () => setHovered(field.id),
      onMouseLeave: () => setHovered(null),
      clampLeft: fieldClampConnector,
      clampRight: changeClampConnector,
      verticalCenter: verticalLineLeft + 3
    }), drawArrowLeftTop && /*#__PURE__*/_react.default.createElement(_Arrow.Arrow, {
      top: fieldClampConnector.top,
      left: connectorFrom.left,
      length: 5,
      wingLength: 8,
      direction: "n"
    }), drawArrowLeftBottom && /*#__PURE__*/_react.default.createElement(_Arrow.Arrow, {
      top: fieldClampConnector.bottom,
      left: connectorFrom.left,
      length: 5,
      wingLength: 8,
      direction: "s"
    }), drawArrowRightTop && /*#__PURE__*/_react.default.createElement(_Arrow.Arrow, {
      top: changeClampConnector.top,
      left: connectorTo.left,
      length: 5,
      wingLength: 8,
      direction: "n"
    }), drawArrowRightBottom && /*#__PURE__*/_react.default.createElement(_Arrow.Arrow, {
      top: changeClampConnector.bottom,
      left: connectorTo.left,
      length: 5,
      wingLength: 8,
      direction: "s"
    }), /*#__PURE__*/_react.default.createElement("path", {
      onClick: onConnectorClick,
      d: (0, _Connector.drawLine)((0, _Connector.vLine)(connectorTo.left, Math.max(change.rect.bounds.top, Math.min(change.rect.top - topEdge + change.rect.bounds.bottom - 19, change.rect.top - topEdge)), Math.max(change.rect.bounds.top, Math.min(change.rect.top - topEdge + change.rect.bounds.bottom - 19, change.rect.top - topEdge + change.rect.height)))),
      strokeWidth: _constants.CONNECTOR_STROKE_WIDTH
    })), _constants.DEBUG_LAYER_BOUNDS && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("line", {
      x1: field.rect.left,
      y1: field.rect.bounds.top,
      x2: field.rect.left + field.rect.width,
      y2: field.rect.bounds.top,
      stroke: "black",
      strokeWidth: _constants.CONNECTOR_STROKE_WIDTH
    }), /*#__PURE__*/_react.default.createElement("line", {
      x1: field.rect.left,
      y1: fieldClampConnector.top,
      x2: field.rect.left + field.rect.width,
      y2: fieldClampConnector.top,
      stroke: "yellow",
      strokeWidth: _constants.CONNECTOR_STROKE_WIDTH
    }), /*#__PURE__*/_react.default.createElement("line", {
      x1: field.rect.left,
      y1: field.rect.bounds.bottom,
      x2: field.rect.left + field.rect.width,
      y2: field.rect.bounds.bottom,
      stroke: "black",
      strokeWidth: _constants.CONNECTOR_STROKE_WIDTH
    }), /*#__PURE__*/_react.default.createElement("line", {
      x1: field.rect.left,
      y1: fieldClampConnector.bottom,
      x2: field.rect.left + field.rect.width,
      y2: fieldClampConnector.bottom,
      stroke: "yellow",
      strokeWidth: _constants.CONNECTOR_STROKE_WIDTH
    })));
  })));
});

exports.ConnectorsOverlay = ConnectorsOverlay;