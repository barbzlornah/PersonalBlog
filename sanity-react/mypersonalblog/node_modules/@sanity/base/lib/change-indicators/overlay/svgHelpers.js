"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectorLinePath = exports.arrowPath = exports.linePathFromPoints = exports.linePath = exports.quadraticBezierPath = exports.lineTo = exports.moveTo = void 0;

var moveTo = (from, to) => "M".concat(from, ",").concat(to);

exports.moveTo = moveTo;

var lineTo = (from, to) => "L".concat(from, ",").concat(to);

exports.lineTo = lineTo;

var quadraticBezierPath = (p1x, p1y, p2x, p2y, p3x, p3y) => // eslint-disable-next-line max-params
"M".concat(p1x, ",").concat(p1y, "Q").concat(p2x, ",").concat(p2y, " ").concat(p3x, ",").concat(p3y);

exports.quadraticBezierPath = quadraticBezierPath;

var linePath = (p1x, p1y, p2x, p2y) => "M".concat(p1x, ",").concat(p1y, "L").concat(p2x, ",").concat(p2y);

exports.linePath = linePath;

var linePathFromPoints = (p1, p2) => "M".concat(p1.left, ",").concat(p1.top, "L").concat(p2.left, ",").concat(p2.top);

exports.linePathFromPoints = linePathFromPoints;

var arrowPath = (wingSize, length, left, top) => {
  var c = Math.sqrt(Math.pow(wingSize, 2) + Math.pow(wingSize, 2)) / 2;
  return [moveTo(left - c, top + c), lineTo(left, top), lineTo(left + c, top + c), moveTo(left, top), lineTo(left, top + length)].join('');
};

exports.arrowPath = arrowPath;

var connectorLinePath = function connectorLinePath(from, to, cornerRadius) {
  var midLeft = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : from.left + (to.left - from.left) / 2;
  var halfHeight = (to.top - from.top) / 2; // left position of the begin (left) arc

  var beginArcLeft = Math.max(from.left, midLeft - cornerRadius); // left position of the end (right) arc

  var endArcLeft = Math.min(to.left, midLeft + cornerRadius);
  var maxTop = Math.max(from.top - cornerRadius, from.top + Math.min(halfHeight, cornerRadius));
  var minTop = Math.min(to.top + cornerRadius, to.top - Math.min(halfHeight, cornerRadius)); // path of the line connecting the leftmost point with the begin arc

  var beginLine = linePath(from.left, from.top, beginArcLeft, from.top); // path of the begin arc

  var beginArc = quadraticBezierPath(beginArcLeft, from.top, midLeft, from.top, midLeft, maxTop); // path of the vertical line in the middle

  var midVerticalLine = linePath(midLeft, maxTop, midLeft, minTop); // path of the end arc

  var endArc = quadraticBezierPath(endArcLeft, to.top, midLeft, to.top, midLeft, minTop); // path of the line connecting the rightmost point with the second arc

  var endLine = linePath(to.left, to.top, endArcLeft, to.top);
  return beginLine + beginArc + midVerticalLine + endArc + endLine;
};

exports.connectorLinePath = connectorLinePath;