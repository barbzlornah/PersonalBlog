import PopperJS from '@popperjs/core';
import React from 'react';
import { ButtonColor, ButtonKind, ButtonPadding, ButtonSize } from './types';
interface DropdownItem {
    title: string;
    icon?: React.ComponentType<Record<string, unknown>>;
}
interface DropdownButtonProps {
    kind?: ButtonKind;
    items: DropdownItem[];
    onAction: (item: DropdownItem) => void;
    inverted?: boolean;
    icon?: React.ComponentType<Record<string, unknown>>;
    loading?: boolean;
    color?: ButtonColor;
    renderItem?: (item: DropdownItem) => React.ReactElement;
    padding?: ButtonPadding;
    placement?: PopperJS.Placement;
    size?: ButtonSize;
    showArrow?: boolean;
}
interface DropdownButtonState {
    menuOpened: boolean;
}
export default class DropDownButton extends React.PureComponent<DropdownButtonProps & React.HTMLProps<HTMLButtonElement>, DropdownButtonState> {
    _buttonElement: React.RefObject<any>;
    _firstItemElement: React.RefObject<HTMLLIElement>;
    _menuElement: HTMLElement | null;
    menuHasKeyboardFocus: boolean;
    keyboardNavigation: boolean;
    menuId: string | null;
    state: {
        menuOpened: boolean;
    };
    constructor(props: any);
    handleClose: (event?: React.MouseEvent<HTMLElement, MouseEvent> | undefined) => void;
    handleClickOutside: () => void;
    setMenuElement: (element: HTMLElement | null) => void;
    handleOnClick: (event: React.MouseEvent<HTMLElement>) => void;
    handleButtonBlur: () => void;
    handleItemClick: (event: React.MouseEvent<HTMLElement>, item: DropdownItem) => void;
    handleItemKeyPress: (event: React.KeyboardEvent<HTMLElement>, item: DropdownItem) => void;
    handleAction: (item: DropdownItem) => void;
    handleMenuBlur: () => void;
    handleButtonKeyDown: (event: React.KeyboardEvent<HTMLButtonElement>) => void;
    render(): JSX.Element;
}
export {};
