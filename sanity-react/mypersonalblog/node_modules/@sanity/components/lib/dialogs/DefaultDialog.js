"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _closeIcon = _interopRequireDefault(require("part:@sanity/base/close-icon"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _clickOutside = require("part:@sanity/components/click-outside");

var _containerQuery = require("part:@sanity/components/container-query");

var _defaultStyle = _interopRequireDefault(require("part:@sanity/components/dialogs/default-style"));

var _portal = require("part:@sanity/components/portal");

var _scroll = require("part:@sanity/components/scroll");

var _react = _interopRequireWildcard(require("react"));

var _Escapable = _interopRequireDefault(require("../utilities/Escapable"));

var _Stacked = _interopRequireDefault(require("../utilities/Stacked"));

var _DefaultDialogActions = require("./DefaultDialogActions");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function DefaultDialog(props) {
  var actions = props.actions,
      actionsAlign = props.actionsAlign,
      children = props.children,
      classNameProp = props.className,
      color = props.color,
      onAction = props.onAction,
      onClose = props.onClose,
      onClickOutside = props.onClickOutside,
      onEscape = props.onEscape,
      _props$padding = props.padding,
      padding = _props$padding === void 0 ? 'medium' : _props$padding,
      _props$showCloseButto = props.showCloseButton,
      showCloseButton = _props$showCloseButto === void 0 ? true : _props$showCloseButto,
      _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size,
      title = props.title;
  var className = (0, _classnames.default)(_defaultStyle.default.root, actions && actions.length > 0 && _defaultStyle.default.hasFunctions, classNameProp);
  var handleEscape = (0, _react.useCallback)(event => {
    // This code used to be `onEscape || onClose`
    if (onEscape) onEscape(event);else if (onClose) onClose();
  }, [onEscape, onClose]);
  var renderCloseButton = onClose && showCloseButton;
  var renderFloatingCloseButton = !title && renderCloseButton;
  var contentClassName = actions && actions.length > 0 ? _defaultStyle.default.content : _defaultStyle.default.contentWithoutFooter;
  var handleClickOutside = (0, _react.useCallback)(() => {
    if (onClickOutside) onClickOutside();
  }, [onClickOutside]);
  var closeButtonColor = color && ['danger', 'success', 'warning'].includes(color) ? 'white' : undefined;
  return /*#__PURE__*/_react.default.createElement(_portal.Portal, null, /*#__PURE__*/_react.default.createElement(_Stacked.default, null, isActive => /*#__PURE__*/_react.default.createElement(_containerQuery.ContainerQuery, {
    className: className,
    "data-dialog-color": color,
    "data-dialog-padding": padding,
    "data-dialog-size": size
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _defaultStyle.default.overlay
  }), /*#__PURE__*/_react.default.createElement(_clickOutside.ClickOutside, {
    onClickOutside: isActive ? handleClickOutside : undefined
  }, ref => /*#__PURE__*/_react.default.createElement("div", {
    className: _defaultStyle.default.card,
    ref: ref
  }, /*#__PURE__*/_react.default.createElement(_Escapable.default // eslint-disable-next-line react/jsx-no-bind
  , {
    onEscape: event => (isActive || event.shiftKey) && handleEscape(event)
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: _defaultStyle.default.inner
  }, renderFloatingCloseButton && /*#__PURE__*/_react.default.createElement("div", {
    className: _defaultStyle.default.floatingCloseButtonContainer
  }, /*#__PURE__*/_react.default.createElement(_default2.default, {
    icon: _closeIcon.default,
    kind: "simple",
    onClick: onClose,
    padding: "small",
    title: "Close"
  })), title && /*#__PURE__*/_react.default.createElement("div", {
    className: _defaultStyle.default.header
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _defaultStyle.default.title
  }, /*#__PURE__*/_react.default.createElement("h1", null, title)), renderCloseButton && /*#__PURE__*/_react.default.createElement("div", {
    className: _defaultStyle.default.closeButtonContainer
  }, /*#__PURE__*/_react.default.createElement(_default2.default, {
    className: _defaultStyle.default.closeButton,
    color: closeButtonColor,
    icon: _closeIcon.default,
    kind: "simple",
    onClick: onClose,
    padding: "small",
    title: "Close"
  }))), /*#__PURE__*/_react.default.createElement(_scroll.ScrollContainer, {
    className: contentClassName
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _defaultStyle.default.contentWrapper
  }, children)), actions && actions.length > 0 && /*#__PURE__*/_react.default.createElement("div", {
    className: _defaultStyle.default.footer
  }, /*#__PURE__*/_react.default.createElement(_DefaultDialogActions.DefaultDialogActions, {
    actions: actions,
    actionsAlign: actionsAlign,
    onAction: onAction
  }))))))));
}

var _default = DefaultDialog;
exports.default = _default;