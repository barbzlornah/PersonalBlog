import React from 'react';
import { Marker, Path } from '@sanity/types';
import { FormFieldPresence } from '@sanity/base/presence';
import { ChangeIndicatorContextProvidedProps } from '@sanity/base/lib/change-indicators';
interface FieldsetProps {
    description?: string;
    legend: string;
    columns?: number;
    isCollapsible?: boolean;
    onFocus?: (path: Path) => void;
    isCollapsed?: boolean;
    fieldset: {
        description?: string;
        legend?: string;
    };
    children?: React.ReactNode;
    level?: number;
    className?: string;
    tabIndex?: number;
    transparent?: boolean;
    styles?: Record<string, string>;
    markers?: Marker[];
    presence: FormFieldPresence[];
    changeIndicator: ChangeIndicatorContextProvidedProps | boolean;
}
interface State {
    isCollapsed: boolean;
    hasBeenToggled: boolean;
}
export default class Fieldset extends React.PureComponent<FieldsetProps, State> {
    _focusElement: HTMLDivElement | null;
    static defaultProps: {
        children: undefined;
        className: string;
        columns: undefined;
        description: undefined;
        level: number;
        fieldset: {};
        isCollapsed: boolean;
        isCollapsible: boolean;
        markers: never[];
        onFocus: undefined;
        styles: undefined;
        tabIndex: undefined;
        transparent: undefined;
        changeIndicator: boolean;
        presence: never[];
    };
    constructor(props: FieldsetProps);
    handleToggle: () => void;
    handleFocus: (event: React.FocusEvent<HTMLDivElement>) => void;
    focus(): void;
    setFocusElement: (el: HTMLDivElement | null) => void;
    render(): JSX.Element;
}
export {};
